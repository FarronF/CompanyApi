/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Company } from '../models/company';
import { companyGet$Json } from '../fn/company/company-get-json';
import { CompanyGet$Json$Params } from '../fn/company/company-get-json';
import { companyGet$Plain } from '../fn/company/company-get-plain';
import { CompanyGet$Plain$Params } from '../fn/company/company-get-plain';
import { companyIdIdGet$Json } from '../fn/company/company-id-id-get-json';
import { CompanyIdIdGet$Json$Params } from '../fn/company/company-id-id-get-json';
import { companyIdIdGet$Plain } from '../fn/company/company-id-id-get-plain';
import { CompanyIdIdGet$Plain$Params } from '../fn/company/company-id-id-get-plain';
import { companyPost } from '../fn/company/company-post';
import { CompanyPost$Params } from '../fn/company/company-post';
import { idIdPut } from '../fn/company/id-id-put';
import { IdIdPut$Params } from '../fn/company/id-id-put';
import { isinIsinGet$Json } from '../fn/company/isin-isin-get-json';
import { IsinIsinGet$Json$Params } from '../fn/company/isin-isin-get-json';
import { isinIsinGet$Plain } from '../fn/company/isin-isin-get-plain';
import { IsinIsinGet$Plain$Params } from '../fn/company/isin-isin-get-plain';

@Injectable({ providedIn: 'root' })
export class CompanyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyGet()` */
  static readonly CompanyGetPath = '/Company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyGet$Plain$Response(params?: CompanyGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Company>>> {
    return companyGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyGet$Plain(params?: CompanyGet$Plain$Params, context?: HttpContext): Observable<Array<Company>> {
    return this.companyGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Company>>): Array<Company> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyGet$Json$Response(params?: CompanyGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Company>>> {
    return companyGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyGet$Json(params?: CompanyGet$Json$Params, context?: HttpContext): Observable<Array<Company>> {
    return this.companyGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Company>>): Array<Company> => r.body)
    );
  }

  /** Path part for operation `companyPost()` */
  static readonly CompanyPostPath = '/Company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  companyPost$Response(params?: CompanyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return companyPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  companyPost(params?: CompanyPost$Params, context?: HttpContext): Observable<void> {
    return this.companyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `companyIdIdGet()` */
  static readonly CompanyIdIdGetPath = '/Company/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyIdIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyIdIdGet$Plain$Response(params: CompanyIdIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return companyIdIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyIdIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyIdIdGet$Plain(params: CompanyIdIdGet$Plain$Params, context?: HttpContext): Observable<Company> {
    return this.companyIdIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyIdIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyIdIdGet$Json$Response(params: CompanyIdIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return companyIdIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyIdIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyIdIdGet$Json(params: CompanyIdIdGet$Json$Params, context?: HttpContext): Observable<Company> {
    return this.companyIdIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /** Path part for operation `isinIsinGet()` */
  static readonly IsinIsinGetPath = '/isin/{isin}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isinIsinGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  isinIsinGet$Plain$Response(params: IsinIsinGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return isinIsinGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isinIsinGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isinIsinGet$Plain(params: IsinIsinGet$Plain$Params, context?: HttpContext): Observable<Company> {
    return this.isinIsinGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isinIsinGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  isinIsinGet$Json$Response(params: IsinIsinGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return isinIsinGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isinIsinGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isinIsinGet$Json(params: IsinIsinGet$Json$Params, context?: HttpContext): Observable<Company> {
    return this.isinIsinGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /** Path part for operation `idIdPut()` */
  static readonly IdIdPutPath = '/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `idIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  idIdPut$Response(params: IdIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return idIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `idIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  idIdPut(params: IdIdPut$Params, context?: HttpContext): Observable<void> {
    return this.idIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
