/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCompanyGet$Json } from '../fn/company/api-company-get-json';
import { ApiCompanyGet$Json$Params } from '../fn/company/api-company-get-json';
import { apiCompanyGet$Plain } from '../fn/company/api-company-get-plain';
import { ApiCompanyGet$Plain$Params } from '../fn/company/api-company-get-plain';
import { apiCompanyIdIdGet$Json } from '../fn/company/api-company-id-id-get-json';
import { ApiCompanyIdIdGet$Json$Params } from '../fn/company/api-company-id-id-get-json';
import { apiCompanyIdIdGet$Plain } from '../fn/company/api-company-id-id-get-plain';
import { ApiCompanyIdIdGet$Plain$Params } from '../fn/company/api-company-id-id-get-plain';
import { apiCompanyIdIdPut } from '../fn/company/api-company-id-id-put';
import { ApiCompanyIdIdPut$Params } from '../fn/company/api-company-id-id-put';
import { apiCompanyIsinIsinGet$Json } from '../fn/company/api-company-isin-isin-get-json';
import { ApiCompanyIsinIsinGet$Json$Params } from '../fn/company/api-company-isin-isin-get-json';
import { apiCompanyIsinIsinGet$Plain } from '../fn/company/api-company-isin-isin-get-plain';
import { ApiCompanyIsinIsinGet$Plain$Params } from '../fn/company/api-company-isin-isin-get-plain';
import { apiCompanyPost$Json } from '../fn/company/api-company-post-json';
import { ApiCompanyPost$Json$Params } from '../fn/company/api-company-post-json';
import { apiCompanyPost$Plain } from '../fn/company/api-company-post-plain';
import { ApiCompanyPost$Plain$Params } from '../fn/company/api-company-post-plain';
import { Company } from '../models/company';

@Injectable({ providedIn: 'root' })
export class CompanyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCompanyGet()` */
  static readonly ApiCompanyGetPath = '/api/Company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyGet$Plain$Response(params?: ApiCompanyGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Company>>> {
    return apiCompanyGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyGet$Plain(params?: ApiCompanyGet$Plain$Params, context?: HttpContext): Observable<Array<Company>> {
    return this.apiCompanyGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Company>>): Array<Company> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyGet$Json$Response(params?: ApiCompanyGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Company>>> {
    return apiCompanyGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyGet$Json(params?: ApiCompanyGet$Json$Params, context?: HttpContext): Observable<Array<Company>> {
    return this.apiCompanyGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Company>>): Array<Company> => r.body)
    );
  }

  /** Path part for operation `apiCompanyPost()` */
  static readonly ApiCompanyPostPath = '/api/Company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyPost$Plain$Response(params?: ApiCompanyPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyPost$Plain(params?: ApiCompanyPost$Plain$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyPost$Json$Response(params?: ApiCompanyPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyPost$Json(params?: ApiCompanyPost$Json$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /** Path part for operation `apiCompanyIdIdGet()` */
  static readonly ApiCompanyIdIdGetPath = '/api/Company/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyIdIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIdIdGet$Plain$Response(params: ApiCompanyIdIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyIdIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyIdIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIdIdGet$Plain(params: ApiCompanyIdIdGet$Plain$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyIdIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyIdIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIdIdGet$Json$Response(params: ApiCompanyIdIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyIdIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyIdIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIdIdGet$Json(params: ApiCompanyIdIdGet$Json$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyIdIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /** Path part for operation `apiCompanyIdIdPut()` */
  static readonly ApiCompanyIdIdPutPath = '/api/Company/id/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyIdIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyIdIdPut$Response(params: ApiCompanyIdIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCompanyIdIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyIdIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCompanyIdIdPut(params: ApiCompanyIdIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiCompanyIdIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCompanyIsinIsinGet()` */
  static readonly ApiCompanyIsinIsinGetPath = '/api/Company/isin/{isin}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyIsinIsinGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIsinIsinGet$Plain$Response(params: ApiCompanyIsinIsinGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyIsinIsinGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyIsinIsinGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIsinIsinGet$Plain(params: ApiCompanyIsinIsinGet$Plain$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyIsinIsinGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCompanyIsinIsinGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIsinIsinGet$Json$Response(params: ApiCompanyIsinIsinGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Company>> {
    return apiCompanyIsinIsinGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCompanyIsinIsinGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCompanyIsinIsinGet$Json(params: ApiCompanyIsinIsinGet$Json$Params, context?: HttpContext): Observable<Company> {
    return this.apiCompanyIsinIsinGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Company>): Company => r.body)
    );
  }

}
